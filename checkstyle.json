{
    "defaultSeverity": "INFO",
    "extendsConfigPath": "",
    "numberOfCheckerThreads": 5,
    "baseDefines": [],
    "defineCombinations": [],
    "checks": [
        {
            "type": "ArrayAccess",
            "props": {
                "spaceBefore": false,
                "spaceInside": false
            }
        },
        {
            "type": "ArrayLiteral",
            "props": {
                "severity": "ERROR"
            }
        },
        {
            "type": "ArrowFunction",
            "props": {
                "allowReturn": true,
                "allowFunction": true,
                "allowCurlyBody": true,
                "allowSingleArgParens": false
            }
        },
        {
            "type": "AvoidIdentifier",
            "props": {
                "avoidIdentifiers": []
            }
        },
        {
            "type": "AvoidStarImport",
            "props": {}
        },
        {
            "type": "AvoidTernaryOperator",
            "props": {}
        },
        {
            "type": "BlockBreakingConditional",
            "props": {}
        },
        {
            "type": "CatchParameterName",
            "props": {
                "format": "^(e|t|ex|[a-z][a-z][a-zA-Z]+)$"
            }
        },
        {
            "type": "CodeSimilarity",
            "props": {
                "severityIdentical": "WARNING",
                "thresholdIdentical": 60,
                "thresholdSimilar": 120
            }
        },
        {
            "type": "CommentedOutCode",
            "props": {}
        },
        {
            "type": "ConditionalCompilation",
            "props": {
                "policy": "aligned",
                "allowSingleline": true
            }
        },
        {
            "type": "CyclomaticComplexity",
            "props": {
                "thresholds": [
                    {
                        "severity": "INFO",
                        "complexity": 10
                    },
                    {
                        "severity": "WARNING",
                        "complexity": 16
                    },
                    {
                        "severity": "ERROR",
                        "complexity": 21
                    }
                ]
            }
        },
        {
            "type": "DefaultComesLast",
            "props": {}
        },
        {
            "type": "Dynamic",
            "props": {
                "severity": "ERROR"
            }
        },
        {
            "type": "ERegLiteral",
            "props": {}
        },
        {
            "type": "EmptyBlock",
            "props": {
                "tokens": [
                    "CLASS_DEF",
                    "ENUM_DEF",
                    "ABSTRACT_DEF",
                    "TYPEDEF_DEF",
                    "INTERFACE_DEF",
                    "OBJECT_DECL",
                    "FUNCTION",
                    "FOR",
                    "IF",
                    "WHILE",
                    "SWITCH",
                    "TRY",
                    "CATCH"
                ],
                "option": "empty"
            }
        },
        {
            "type": "EmptyPackage",
            "props": {
                "enforceEmptyPackage": false
            }
        },
        {
            "type": "ExtendedEmptyLines",
            "props": {
                "max": 1,
                "skipSingleLineTypes": true,
                "defaultPolicy": "upto",
                "ignore": [],
                "none": [],
                "exact": [],
                "upto": [],
                "atleast": []
            }
        },
        {
            "type": "Final",
            "props": {}
        },
        {
            "type": "HexadecimalLiteral",
            "props": {
                "option": "upperCase"
            }
        },
        {
            "type": "IndentationCharacter",
            "props": {
                "character": "space",
                "ignorePattern": "^$"
            }
        },
        {
            "type": "Interface",
            "props": {
                "allowMarkerInterfaces": true,
                "allowProperties": true
            }
        },
        {
            "type": "LineLength",
            "props": {
                "max": 160,
                "ignorePattern": "^$"
            }
        },
        {
            "type": "ListenerName",
            "props": {
                "listeners": [
                    "addEventListener",
                    "addListener",
                    "on",
                    "once"
                ],
                "format": "^_?[a-z][a-zA-Z0-9]*$"
            }
        },
        {
            "type": "LocalVariableName",
            "props": {
                "format": "^[a-z][a-zA-Z0-9]*$",
                "tokens": [],
                "ignoreExtern": true
            }
        },
        {
            "type": "MethodCount",
            "props": {
                "maxTotal": 100,
                "maxPrivate": 100,
                "maxPublic": 100
            }
        },
        {
            "type": "MethodName",
            "props": {
                "format": "^[a-z][a-zA-Z0-9]*$",
                "tokens": [],
                "ignoreExtern": true
            }
        },
        {
            "type": "ModifierOrder",
            "props": {
                "modifiers": [
                    "EXTERN",
                    "OVERLOAD",
                    "OVERRIDE",
                    "PUBLIC_PRIVATE",
                    "INLINE",
                    "STATIC",
                    "DYNAMIC",
                    "FINAL",
                    "MACRO"
                ]
            }
        },
        {
            "type": "MultipleVariableDeclarations",
            "props": {
                "severity": "WARNING"
            }
        },
        {
            "type": "NestedControlFlow",
            "props": {
                "max": 4
            }
        },
        {
            "type": "NestedForDepth",
            "props": {
                "severity": "ERROR",
                "max": 1
            }
        },
        {
            "type": "NestedIfDepth",
            "props": {
                "severity": "ERROR",
                "max": 1
            }
        },
        {
            "type": "NestedTryDepth",
            "props": {
                "max": 1
            }
        },
        {
            "type": "NullableParameter",
            "props": {
                "option": "questionMark"
            }
        },
        {
            "type": "OperatorWhitespace",
            "props": {
                "assignOpPolicy": "around",
                "unaryOpPolicy": "none",
                "ternaryOpPolicy": "around",
                "arithmeticOpPolicy": "around",
                "compareOpPolicy": "around",
                "bitwiseOpPolicy": "around",
                "boolOpPolicy": "around",
                "intervalOpPolicy": "none",
                "arrowPolicy": "around",
                "arrowFunctionPolicy": "around",
                "oldFunctionTypePolicy": "around",
                "newFunctionTypePolicy": "around"
            }
        },
        {
            "type": "ParameterName",
            "props": {
                "format": "^(_|[a-z][a-zA-Z0-9]*$)",
                "tokens": [],
                "ignoreExtern": true
            }
        },
        {
            "type": "ParameterNumber",
            "props": {
                "max": 5,
                "ignoreOverriddenMethods": true,
                "severity": "ERROR"
            }
        },
        {
            "type": "PublicAccessor",
            "props": {
                "severity": "ERROR"
            }
        },
        {
            "type": "RedundantAccessMeta",
            "props": {
                "prohibitMeta": false
            }
        },
        {
            "type": "RedundantAllowMeta",
            "props": {
                "prohibitMeta": false
            }
        },
        {
            "type": "RedundantModifier",
            "props": {
                "enforcePublicPrivate": false,
                "enforcePublic": false,
                "enforcePrivate": false
            }
        },
        {
            "type": "Return",
            "props": {
                "allowEmptyReturn": true,
                "enforceReturnType": false,
                "enforceReturnTypeForAnonymous": false
            }
        },
        {
            "type": "SeparatorWhitespace",
            "props": {
                "dotPolicy": "none",
                "commaPolicy": "after",
                "allowTrailingComma": false,
                "semicolonPolicy": "after"
            }
        },
        {
            "type": "SeparatorWrap",
            "props": {
                "tokens": [
                    ","
                ],
                "option": "eol"
            }
        },
        {
            "type": "SimplifyBooleanExpression",
            "props": {
                "severity": "ERROR"
            }
        },
        {
            "type": "SimplifyBooleanReturn",
            "props": {
                "severity": "ERROR"
            }
        },
        {
            "type": "StringLiteral",
            "props": {
                "policy": "doubleAndInterpolation",
                "allowException": true
            }
        },
        {
            "type": "TODOComment",
            "props": {
                "format": "^\\s*(TODO|FIXME|HACK|XXX|BUG)",
                "severity": "IGNORE"
            }
        },
        {
            "type": "TabForAligning",
            "props": {
                "ignorePattern": "^$"
            }
        },
        {
            "type": "Trace",
            "props": {}
        },
        {
            "type": "TrailingWhitespace",
            "props": {}
        },
        {
            "type": "TypeName",
            "props": {
                "format": "^[A-Z]+[a-zA-Z0-9]*$",
                "tokens": [],
                "ignoreExtern": true
            }
        },
        {
            "type": "UnnecessaryConstructor",
            "props": {}
        },
        {
            "type": "UnusedImport",
            "props": {
                "ignoreModules": [],
                "moduleTypeMap": {}
            }
        },
        {
            "type": "UnusedLocalVar",
            "props": {}
        }
    ],
    "exclude": {},
    "version": 1
}
